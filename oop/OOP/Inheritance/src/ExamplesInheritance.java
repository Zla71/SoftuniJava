
public class ExamplesInheritance {
    public static void main(String[] args) {

        // използва се IS-A връзка

        // информация в папка Demo

        // наследяването решава проблеми като повтаряне на код (полета/характеристики) и по-лесна поддръжка
        // имена ---> бащен клас, супер клас, базов клас, основен клас
        // дъщерният клас унаследява всичко от бащиният клас, полета и логика, но също така си имат и допълнителни свои характеристики

        // думата this я използваме, за да реферираме към елементите на този конкретен клас
        // думата super я използваме, за да реферираме към елементите в бащиният/базовият клас

        // полетата от бащиният/основен клас трябва да са protected, за да се достъпват от наследниците/дъщерните класове

        // private полетата в бащиният/базов клас не могат да се достъпят от наследниците

        // всеки наследник трябва да удовлетворява конструктора на своят бащин/базов клас

        // с думата SUPER се гледа предходният последен клас, който се наследява

        // в който клас са полетата - там пишем сетърите и гетърите

        // ако направим дадено поле в основният/бащин клас protected и след това неговият сетер да е protected ще може да имаме различни проверки на това поле в наследниците

        // методите не трябва да са final, за да могат да се пренаписват, ако трябва да не се пренаписват се слагат final

        // ако класа е final, той не може да бъде наследен

        // преизполване на класове, можем да дефинираме класове в класовете, използва се композиция

//        class Laptop {
//            Monitor monitor;
//            Touchpad touchpad;
//            Keyboard keyboard;
//            ...
//        }



    }
}