import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class ExamplesInterfacesAndAbstraction {
    public static void main(String[] args) {


        // INTERFACES

        // примери в пакет Demo !!!!!!

        // позволява ни да дефинираме действия,които в последствие нашите класове ще могат да извършват

        // интерфейс - съвкупност от методи без имплементация, които ще могат да извършват нашите класове в последствие

        // интерфейс класовете могат да притежават дефолтни методи, но не са добра практика

        List<Integer> numbers = new ArrayList<>(); // ArrayList имплементира List

        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);


        // отново могат да извършва методите add и други, но по съвсем различен начин
        List<Integer> numbersLinkedList = new LinkedList<>(); // тук използваме друга имлементация
        numbersLinkedList.add(1);
        numbersLinkedList.add(2);
        numbersLinkedList.add(3);
        numbersLinkedList.add(4);


        // abstraction



        // процес, при който ние се фокуксираме върху информацията, която е релевантна за нас и забравяме за информацията, която не е релевантна за нас

        // методите ще са мястото, на което ще пишем имплементационните детайли

        // Абстрактните класове не могат да бъдат инстанцирани

        // асбтрактните класове могат да имат абстрактни методи

        // примери в AbstractDemo !!!!

        // необходими са, когато искаме да дефинираме общо поведение и състояние за група от класове, но в същият момент, да не разрешаваме да се инстанцира този тип клас
        // наследните на тези класове ще имплементират методи на абстрактният клас

        // абстрактен метод - метод дефиниция, нямат тяло, позволени са в абстрактните класве и интерфейсите

        // абстрактният клас може да има обикновен метод, който дава общо поведение на всички класове, които го наследяват

        // абстрактният класе го ползваме за базов модел

        // разлики между енкапсулацията и абстракцията
        //1. Абстракцията е процес, при който се фокусираме върху частта какво можето приложение може да прави, разграничение между дефиниция и имплементация
        //2. енкапсулацията е процес, при който ние взимаме едно парче код и го скриваме с използването на access modifiers (protected, private)




        // разлики между интерфейси и абстрактни класове
        // 1. интерфейса трябва да бъде имлементиран, докато абстрактният клас трябва да бъде наследен
        // 2. един клас може да имплементира много интерфейси, докато абстрактният клас може да бъде наследен от 1 клас
        // 3. интерфейсите не могат да има access modifiers(private, protected), докато при абстрактен клас можем да имаме полета и конструктор
        // 4. в интерфейс, ако добавим нов метод, тогава трябва всички класове, които го имплементират да добавят този метод и да имплементират новият метод
        // 5. ако добавим метод в абстрактният клас можем да му добавим дефолтна имплементация и тогава няма да имаме проблем с класовете, които го наследяват
        // 6. интерфейса е договор, а абастрактният клас е базов модел


    }

    public void sayHello() { // -->> дефиниция на метода (описва действието на метода)      ДЕФИНИЦИЯТА Е КАКВО???

        System.out.println("Hello"); // -->> имплементация на метода (описва начина, по който метода извърщва действието)    ИМЛЕМЕНТАЦИЯТА Е  КАК???
    }

    // пример за INTERFACE
    public interface Printable {
        int MIN = 5;
        void print();
    }

}